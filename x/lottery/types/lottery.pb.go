// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cosmos/lottery/v1beta1/lottery.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgEnterLottery defines a SDK message for enter on the lottery.
type MsgEnterLottery struct {
	User       []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Amount     int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenDenom string `protobuf:"bytes,3,opt,name=token_denom,json=tokenDenom,proto3" json:"token_denom,omitempty"`
}

func (m *MsgEnterLottery) Reset()         { *m = MsgEnterLottery{} }
func (m *MsgEnterLottery) String() string { return proto.CompactTextString(m) }
func (*MsgEnterLottery) ProtoMessage()    {}
func (*MsgEnterLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee233ac8c5e0d765, []int{0}
}
func (m *MsgEnterLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnterLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnterLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnterLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnterLottery.Merge(m, src)
}
func (m *MsgEnterLottery) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnterLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnterLottery.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnterLottery proto.InternalMessageInfo

func (m *MsgEnterLottery) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MsgEnterLottery) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgEnterLottery) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

// MsgEnterLotteryResponse defines the Msg/EnterLottery response type.
type MsgEnterLotteryResponse struct {
}

func (m *MsgEnterLotteryResponse) Reset()         { *m = MsgEnterLotteryResponse{} }
func (m *MsgEnterLotteryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEnterLotteryResponse) ProtoMessage()    {}
func (*MsgEnterLotteryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee233ac8c5e0d765, []int{1}
}
func (m *MsgEnterLotteryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnterLotteryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnterLotteryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnterLotteryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnterLotteryResponse.Merge(m, src)
}
func (m *MsgEnterLotteryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnterLotteryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnterLotteryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnterLotteryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgEnterLottery)(nil), "cosmos.staking.v1beta1.MsgEnterLottery")
	proto.RegisterType((*MsgEnterLotteryResponse)(nil), "cosmos.staking.v1beta1.MsgEnterLotteryResponse")
}

func init() {
	proto.RegisterFile("proto/cosmos/lottery/v1beta1/lottery.proto", fileDescriptor_ee233ac8c5e0d765)
}

var fileDescriptor_ee233ac8c5e0d765 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0x2f, 0xce, 0xcd, 0x2f, 0xd6, 0xcf, 0xc9, 0x2f, 0x29, 0x49, 0x2d, 0xaa,
	0xd4, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0x84, 0xf1, 0xf5, 0xc0, 0x8a, 0x84, 0xc4, 0x20,
	0xaa, 0xf4, 0x8a, 0x4b, 0x12, 0xb3, 0x33, 0xf3, 0xd2, 0xf5, 0xa0, 0xaa, 0x94, 0xe2, 0xb8, 0xf8,
	0x7d, 0x8b, 0xd3, 0x5d, 0xf3, 0x4a, 0x52, 0x8b, 0x7c, 0x20, 0x1a, 0x84, 0x84, 0xb8, 0x58, 0x4a,
	0x8b, 0x53, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x21, 0x31, 0x2e, 0xb6,
	0xc4, 0xdc, 0xfc, 0xd2, 0xbc, 0x12, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x28, 0x4f, 0x48,
	0x9e, 0x8b, 0xbb, 0x24, 0x3f, 0x3b, 0x35, 0x2f, 0x3e, 0x25, 0x35, 0x2f, 0x3f, 0x57, 0x82, 0x59,
	0x81, 0x51, 0x83, 0x33, 0x88, 0x0b, 0x2c, 0xe4, 0x02, 0x12, 0x51, 0x92, 0xe4, 0x12, 0x47, 0x33,
	0x3f, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0xd5, 0x28, 0x9f, 0x8b, 0xd9, 0xb7, 0x38, 0x5d,
	0x28, 0x83, 0x8b, 0x07, 0xc5, 0x7a, 0x75, 0x3d, 0xec, 0x4e, 0xd5, 0x43, 0x33, 0x47, 0x4a, 0x9f,
	0x48, 0x85, 0x30, 0x0b, 0x9d, 0xdc, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21,
	0x4a, 0x27, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x17, 0x16, 0x9c, 0x10, 0x4a,
	0xb7, 0x38, 0x25, 0x5b, 0xbf, 0x02, 0x1e, 0xb6, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0,
	0x20, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x53, 0x45, 0xc1, 0x68, 0x80, 0x01, 0x00, 0x00,
}

func (m *MsgEnterLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnterLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnterLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintLottery(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintLottery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnterLotteryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnterLotteryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnterLotteryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintLottery(dAtA []byte, offset int, v uint64) int {
	offset -= sovLottery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEnterLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovLottery(uint64(m.Amount))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovLottery(uint64(l))
	}
	return n
}

func (m *MsgEnterLotteryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovLottery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLottery(x uint64) (n int) {
	return sovLottery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEnterLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnterLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnterLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User[:0], dAtA[iNdEx:postIndex]...)
			if m.User == nil {
				m.User = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnterLotteryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnterLotteryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnterLotteryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLottery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLottery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLottery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLottery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLottery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLottery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLottery = fmt.Errorf("proto: unexpected end of group")
)
